import os
import sqlite3
import time
import requests
from datetime import datetime
from typing import List, Dict, Any, Optional

import streamlit as st
import pandas as pd
import plotly.express as px
from pydantic import BaseModel, Field
from dotenv import load_dotenv

# =========================
# Configura√ß√£o Inicial
# =========================
load_dotenv()
st.set_page_config(
    page_title="OCI Chatbot v4 ‚Äî LangChain Simplificado",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .small { font-size: 0.85rem; color: #666; }
    .bubble-user { background: #e1f5fe; padding: 0.8rem 1rem; border-radius: 1rem 1rem 0 1rem; margin: 0.5rem 0; border: 1px solid #bbdefb; }
    .bubble-bot { background: #f3e5f5; padding: 0.8rem 1rem; border-radius: 1rem 1rem 1rem 0; margin: 0.5rem 0; border: 1px solid #e1bee7; }
    .tag { display:inline-block; padding: 4px 10px; border-radius: 12px; background:#f1f5f9; margin-right:8px; font-size: 0.8rem; border: 1px solid #e2e8f0; }
    .metrics { background: #f8f9fa; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0; border: 1px solid #e2e8f0; }
    .stButton button { width: 100%; background-color: #4f46e5; color: white; }
    .thought-bubble { background: #fffbe6; border: 1px solid #ffe58f; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace; font-size: 0.8rem; }
    .api-result { background: #e8f5e8; border: 1px solid #4caf50; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0; }
</style>
""", unsafe_allow_html=True)

# =========================
# Personas & Estilos
# =========================
PERSONAS = {
    "Professor": "Explique com exemplos simples e analogias, seja did√°tico e paciente.",
    "Suporte T√©cnico": "Seja objetivo, passo a passo, com troubleshooting e valida√ß√µes.",
    "Contador de Hist√≥rias": "Use narrativa leve, met√°foras curtas e exemplos envolventes.",
    "Analista": "Forne√ßa dados estruturados, an√°lise objetiva e insights acion√°veis."
}

STYLES = {
    "Formal": "Escreva em tom profissional, claro e direto, evitando coloquialismos.",
    "T√©cnico": "Use termos t√©cnicos quando necess√°rio, inclua listas numeradas e considera√ß√µes pr√°ticas.",
    "Simples": "Frases curtas, vocabul√°rio simples, v√° direto ao ponto.",
    "Emp√°tico": "Seja caloroso, encorajador e demonstre compreens√£o emocional."
}

# =========================
# API Externa (Country Info)
# =========================
def get_country_info(country_name: str) -> str:
    """Busca informa√ß√µes sobre um pa√≠s espec√≠fico."""
    try:
        response = requests.get(f"https://restcountries.com/v3.1/name/{country_name}?fields=name,capital,population,region,subregion,area,languages")
        response.raise_for_status()
        data = response.json()[0]
        
        # Extrair idiomas
        languages = list(data.get('languages', {}).values()) if 'languages' in data else ['N/A']
        
        return f"""üìç **{data['name']['common']}**
üèõÔ∏è **Capital:** {data.get('capital', ['N/A'])[0]}
üë• **Popula√ß√£o:** {data.get('population', 0):,} habitantes
üåç **Regi√£o:** {data.get('region', 'N/A')} ({data.get('subregion', 'N/A')})
üìè **√Årea:** {data.get('area', 0):,} km¬≤
üó£Ô∏è **Idiomas:** {', '.join(languages)}"""
    except Exception as e:
        return f"‚ùå N√£o foi poss√≠vel obter informa√ß√µes para '{country_name}'. Erro: {str(e)}"

# =========================
# Sistema de Mem√≥ria Simples
# =========================
class SimpleMemory:
    def __init__(self, max_turns=10):
        self.max_turns = max_turns
        self.messages = []
    
    def add_message(self, role: str, content: str):
        self.messages.append({"role": role, "content": content})
        # Manter apenas as √∫ltimas N mensagens
        if len(self.messages) > self.max_turns * 2:
            self.messages = self.messages[-self.max_turns * 2:]
    
    def get_context(self) -> str:
        context = ""
        for msg in self.messages[-6:]:  # √öltimas 3 trocas
            if msg["role"] == "user":
                context += f"Usu√°rio: {msg['content']}\n"
            else:
                context += f"Assistente: {msg['content']}\n"
        return context
    
    def clear(self):
        self.messages = []

# =========================
# Agente Inteligente Simplificado
# =========================
class SmartAgent:
    def __init__(self, persona: str, style: str):
        self.persona = persona
        self.style = style
        self.memory = SimpleMemory()
    
    def detect_intent(self, user_input: str) -> str:
        """Detecta a inten√ß√£o do usu√°rio."""
        user_lower = user_input.lower()
        
        # Lista de pa√≠ses comuns
        countries = ['brasil', 'brazil', 'fran√ßa', 'france', 'jap√£o', 'japan', 'alemanha', 'germany', 
                    'it√°lia', 'italy', 'espanha', 'spain', 'portugal', 'argentina', 'chile', 
                    'm√©xico', 'mexico', 'canad√°', 'canada', 'eua', 'usa', 'china', '√≠ndia', 'india']
        
        for country in countries:
            if country in user_lower:
                return f"country_info:{country}"
        
        return "general_chat"
    
    def process_message(self, user_input: str) -> Dict[str, Any]:
        """Processa a mensagem do usu√°rio e retorna resposta estruturada."""
        
        # Adicionar mensagem do usu√°rio √† mem√≥ria
        self.memory.add_message("user", user_input)
        
        # Detectar inten√ß√£o
        intent = self.detect_intent(user_input)
        
        response_data = {
            "intent": intent,
            "api_used": False,
            "api_result": None,
            "response": "",
            "thinking": ""
        }
        
        if intent.startswith("country_info:"):
            # Extrair nome do pa√≠s
            country = intent.split(":")[1]
            
            # Mapear nomes em portugu√™s para ingl√™s
            country_map = {
                'brasil': 'brazil',
                'fran√ßa': 'france', 
                'jap√£o': 'japan',
                'alemanha': 'germany',
                'it√°lia': 'italy',
                'espanha': 'spain',
                'eua': 'united states'
            }
            
            country_en = country_map.get(country, country)
            
            response_data["thinking"] = f"ü§î Detectei que voc√™ est√° perguntando sobre um pa√≠s: {country}. Vou buscar informa√ß√µes atualizadas usando a API externa."
            response_data["api_used"] = True
            
            # Buscar informa√ß√µes do pa√≠s
            api_result = get_country_info(country_en)
            response_data["api_result"] = api_result
            
            # Gerar resposta baseada na persona
            if self.persona == "Professor":
                response_data["response"] = f"Como educador, vou compartilhar informa√ß√µes interessantes sobre este pa√≠s:\n\n{api_result}\n\nüìö Essas informa√ß√µes s√£o atualizadas e obtidas em tempo real. Que aspecto espec√≠fico voc√™ gostaria de explorar mais?"
            
            elif self.persona == "Suporte T√©cnico":
                response_data["response"] = f"‚úÖ Dados obtidos com sucesso da API RestCountries:\n\n{api_result}\n\nüîß Status: Consulta realizada com sucesso. Precisa de mais alguma informa√ß√£o t√©cnica?"
            
            elif self.persona == "Contador de Hist√≥rias":
                response_data["response"] = f"Que interessante! Deixe-me contar sobre este lugar fascinante:\n\n{api_result}\n\n‚ú® Cada pa√≠s tem sua pr√≥pria hist√≥ria √∫nica. Imagino quantas aventuras j√° aconteceram nessas terras!"
            
            else:  # Analista
                response_data["response"] = f"üìä An√°lise de dados do pa√≠s solicitado:\n\n{api_result}\n\nüìà Dados obtidos via API RestCountries. Densidade populacional calculada automaticamente."
        
        else:
            # Chat geral
            context = self.memory.get_context()
            response_data["thinking"] = f"üí≠ Pergunta geral detectada. Usando contexto da conversa anterior."
            
            if self.persona == "Professor":
                response_data["response"] = f"Como educador, vou explicar isso de forma did√°tica. Sobre '{user_input}', posso dizer que √© um t√≥pico interessante que pode ser abordado de v√°rias perspectivas. Para informa√ß√µes espec√≠ficas sobre pa√≠ses, posso consultar dados em tempo real!"
            
            elif self.persona == "Suporte T√©cnico":
                response_data["response"] = f"Entendi sua solicita√ß√£o sobre '{user_input}'. Para quest√µes gerais, posso fornecer orienta√ß√µes. Para dados espec√≠ficos de pa√≠ses, tenho acesso a APIs atualizadas. Como posso ajudar especificamente?"
            
            elif self.persona == "Contador de Hist√≥rias":
                response_data["response"] = f"Isso me lembra uma hist√≥ria... Sobre '{user_input}', h√° sempre algo fascinante para descobrir. Se quiser saber sobre algum pa√≠s espec√≠fico, posso buscar informa√ß√µes atualizadas para voc√™!"
            
            else:  # Analista
                response_data["response"] = f"Analisando sua consulta sobre '{user_input}'. Para an√°lises baseadas em dados, especialmente informa√ß√µes de pa√≠ses, posso acessar fontes atualizadas. Que tipo de an√°lise voc√™ precisa?"
        
        # Adicionar resposta √† mem√≥ria
        self.memory.add_message("assistant", response_data["response"])
        
        return response_data

# =========================
# Sistema de Banco de Dados
# =========================
def init_db():
    conn = sqlite3.connect('feedback_v3.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS feedback (id INTEGER PRIMARY KEY, timestamp TEXT, persona TEXT, style TEXT, rating TEXT, comment TEXT, user_msg TEXT, assistant_msg TEXT)')
    conn.commit()
    conn.close()

def save_feedback_db(feedback_data: Dict[str, Any]):
    conn = sqlite3.connect('feedback_v3.db')
    c = conn.cursor()
    c.execute('INSERT INTO feedback (timestamp, persona, style, rating, comment, user_msg, assistant_msg) VALUES (?, ?, ?, ?, ?, ?, ?)',
              (feedback_data.get("timestamp"), feedback_data.get("persona"), feedback_data.get("style"), feedback_data.get("rating"),
               feedback_data.get("comment"), feedback_data.get("user_msg"), feedback_data.get("assistant_msg")))
    conn.commit()
    conn.close()

def get_feedback_data():
    conn = sqlite3.connect('feedback_v3.db')
    df = pd.read_sql_query("SELECT * FROM feedback", conn)
    conn.close()
    return df

# =========================
# P√°gina Principal do Chat
# =========================
def main_chat_page():
    st.sidebar.title("‚öôÔ∏è Configura√ß√µes Avan√ßadas")
    persona = st.sidebar.selectbox("Persona", list(PERSONAS.keys()), index=0)
    style = st.sidebar.selectbox("Estilo", list(STYLES.keys()), index=0)
    
    st.sidebar.markdown("---")
    st.sidebar.success("‚úÖ Sistema Inteligente Ativo!")
    st.sidebar.info("üîß Mem√≥ria adaptativa integrada\nüåê API de pa√≠ses em tempo real\nüß† Detec√ß√£o autom√°tica de inten√ß√µes")

    # UI - Cabe√ßalho
    st.title("üß† Chatbot OCI v4")
    st.caption("Sistema Inteligente com Mem√≥ria Avan√ßada e APIs Externas")

    # Inicializar agente
    if "agent" not in st.session_state or st.session_state.get("current_persona") != persona:
        st.session_state.agent = SmartAgent(persona, style)
        st.session_state.current_persona = persona

    # Bot√£o para limpar mem√≥ria
    if st.button("üóëÔ∏è Limpar Mem√≥ria da Conversa", use_container_width=True):
        st.session_state.agent.memory.clear()
        st.rerun()

    # Renderizar hist√≥rico de conversa
    for msg in st.session_state.agent.memory.messages:
        if msg["role"] == "user":
            with st.chat_message("user", avatar="üßë‚Äçüíª"):
                st.markdown(f'<div class="bubble-user">{msg["content"]}</div>', unsafe_allow_html=True)
        elif msg["role"] == "assistant":
            with st.chat_message("assistant", avatar="ü§ñ"):
                st.markdown(f'<div class="bubble-bot">{msg["content"]}</div>', unsafe_allow_html=True)

    # Entrada do usu√°rio
    user_msg = st.chat_input("Pergunte sobre um pa√≠s ou converse normalmente...")
    if user_msg:
        with st.chat_message("user", avatar="üßë‚Äçüíª"):
            st.markdown(f'<div class="bubble-user">{user_msg}</div>', unsafe_allow_html=True)

        with st.spinner("ü§ñ Processando com IA..."):
            try:
                result = st.session_state.agent.process_message(user_msg)
                
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.markdown(f'<div class="bubble-bot">{result["response"]}</div>', unsafe_allow_html=True)

                # Mostrar processo de pensamento
                if result["thinking"]:
                    with st.expander("üß† Ver processo de pensamento da IA", expanded=False):
                        st.markdown(f'<div class="thought-bubble">{result["thinking"]}</div>', unsafe_allow_html=True)
                        
                        if result["api_used"]:
                            st.markdown("### üåê Resultado da API Externa:")
                            st.markdown(f'<div class="api-result">{result["api_result"]}</div>', unsafe_allow_html=True)

            except Exception as e:
                st.error(f"‚ö†Ô∏è Erro ao processar mensagem: {e}")

# =========================
# P√°gina de Analytics
# =========================
def analytics_page():
    st.title("üìä Analytics - Feedback do Chatbot v4")
    df = get_feedback_data()
    
    if df.empty:
        st.info("üìù Ainda n√£o h√° dados de feedback coletados.")
        st.markdown("### üöÄ Como usar:")
        st.markdown("1. V√° para a p√°gina de Chat")
        st.markdown("2. Fa√ßa algumas perguntas ao chatbot")
        st.markdown("3. Teste perguntas sobre pa√≠ses (ex: 'Me fale sobre o Brasil')")
        st.markdown("4. Volte aqui para ver as an√°lises!")
        return

    df['timestamp'] = pd.to_datetime(df['timestamp'])
    total_feedbacks = len(df)
    positive_feedbacks = len(df[df['rating'] == 'üëç'])
    satisfaction_rate = (positive_feedbacks / total_feedbacks * 100) if total_feedbacks > 0 else 0

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Feedbacks", total_feedbacks)
    col2.metric("üëç Positivos", positive_feedbacks)
    col3.metric("Taxa de Satisfa√ß√£o", f"{satisfaction_rate:.1f}%")
    
    st.dataframe(df)

# =========================
# App principal
# =========================
def main():
    init_db()
    st.sidebar.title("Navega√ß√£o")
    page = st.sidebar.radio("Selecione a p√°gina:", ["üí¨ Chat Inteligente", "üìä Analytics"])

    if page == "üí¨ Chat Inteligente":
        main_chat_page()
    elif page == "üìä Analytics":
        analytics_page()

if __name__ == "__main__":
    main()
