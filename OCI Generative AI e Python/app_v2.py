import os
import sqlite3
import time
import requests
from datetime import datetime
from typing import List, Dict, Any, Optional

import streamlit as st
import pandas as pd
import plotly.express as px
from pydantic import BaseModel, Field
from dotenv import load_dotenv

from langchain.agents import AgentExecutor, create_react_agent
from langchain_core.prompts import PromptTemplate
from langchain_core.tools import Tool
from langchain.memory import ConversationBufferWindowMemory
from langchain_community.llms.oci_generative_ai import OCIAuthType
from langchain_core.language_models.llms import LLM

# =========================
# Configura√ß√£o Inicial
# =========================
load_dotenv()
st.set_page_config(
    page_title="OCI Chatbot v4 ‚Äî LangChain, Tools & Mem√≥ria Avan√ßada",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .small { font-size: 0.85rem; color: #666; }
    .bubble-user { background: #e1f5fe; padding: 0.8rem 1rem; border-radius: 1rem 1rem 0 1rem; margin: 0.5rem 0; border: 1px solid #bbdefb; }
    .bubble-bot { background: #f3e5f5; padding: 0.8rem 1rem; border-radius: 1rem 1rem 1rem 0; margin: 0.5rem 0; border: 1px solid #e1bee7; }
    .tag { display:inline-block; padding: 4px 10px; border-radius: 12px; background:#f1f5f9; margin-right:8px; font-size: 0.8rem; border: 1px solid #e2e8f0; }
    .metrics { background: #f8f9fa; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0; border: 1px solid #e2e8f0; }
    .stButton button { width: 100%; background-color: #4f46e5; color: white; }
    .thought-bubble { background: #fffbe6; border: 1px solid #ffe58f; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace; font-size: 0.8rem; }
</style>
""", unsafe_allow_html=True)

# =========================
# Personas & Estilos
# =========================
PERSONAS = {
    "Professor": "Explique com exemplos simples e analogias, seja did√°tico e paciente.",
    "Suporte T√©cnico": "Seja objetivo, passo a passo, com troubleshooting e valida√ß√µes.",
    "Contador de Hist√≥rias": "Use narrativa leve, met√°foras curtas e exemplos envolventes.",
    "Analista": "Forne√ßa dados estruturados, an√°lise objetiva e insights acion√°veis."
}

STYLES = {
    "Formal": "Escreva em tom profissional, claro e direto, evitando coloquialismos.",
    "T√©cnico": "Use termos t√©cnicos quando necess√°rio, inclua listas numeradas e considera√ß√µes pr√°ticas.",
    "Simples": "Frases curtas, vocabul√°rio simples, v√° direto ao ponto.",
    "Emp√°tico": "Seja caloroso, encorajador e demonstre compreens√£o emocional."
}

# =========================
# Ferramenta de API Externa (Country Info)
# =========================
def get_country_info(country_name: str) -> str:
    """Busca informa√ß√µes sobre um pa√≠s espec√≠fico, como capital, popula√ß√£o e regi√£o. Use esta ferramenta quando o usu√°rio perguntar sobre dados de um pa√≠s."""
    try:
        response = requests.get(f"https://restcountries.com/v3.1/name/{country_name}?fields=name,capital,population,region,subregion")
        response.raise_for_status()
        data = response.json()[0]
        return f"Informa√ß√µes sobre {data['name']['common']}:\n- Capital: {data['capital'][0]}\n- Popula√ß√£o: {data['population']:,}\n- Regi√£o: {data['region']} ({data['subregion']})"
    except Exception as e:
        return f"N√£o foi poss√≠vel obter informa√ß√µes para '{country_name}'. Verifique o nome e tente novamente. Erro: {e}"

# Criar a ferramenta usando a classe Tool
country_tool = Tool(
    name="get_country_info",
    description="Busca informa√ß√µes sobre um pa√≠s espec√≠fico, como capital, popula√ß√£o e regi√£o. Use esta ferramenta quando o usu√°rio perguntar sobre dados de um pa√≠s.",
    func=get_country_info
)

tools = [country_tool]

# =========================
# LLM Customizado (Modo Simula√ß√£o)
# =========================
class MockOCI(LLM):
    @property
    def _llm_type(self) -> str:
        return "mock_oci"

    def _call(self, prompt: str, stop: Optional[List[str]] = None, **kwargs: Any) -> str:
        # Extrai a √∫ltima pergunta do usu√°rio do prompt complexo do agente
        user_last_question = prompt.split("Pergunta:")[-1].strip()

        # Verifica se a pergunta √© sobre um pa√≠s
        if "brasil" in user_last_question.lower() or "france" in user_last_question.lower() or "japan" in user_last_question.lower():
            return """
            Pensamento: O usu√°rio est√° perguntando sobre um pa√≠s. Devo usar a ferramenta `get_country_info`.
            A√ß√£o: get_country_info
            Entrada da A√ß√£o: Brasil
            """
        else:
            return f"""
            Pensamento: O usu√°rio est√° fazendo uma pergunta geral. N√£o preciso de ferramentas.
            Resposta Final: Entendi sua pergunta sobre '{user_last_question}'. Como um modelo de linguagem avan√ßado, posso ajudar com informa√ß√µes gerais, mas para dados em tempo real, minhas ferramentas s√£o mais √∫teis.
            """

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        return {"model": "mock_oci_v1"}

# =========================
# Sistema de Banco de Dados (sem altera√ß√µes)
# =========================
def init_db():
    conn = sqlite3.connect('feedback_v2.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS feedback (id INTEGER PRIMARY KEY, timestamp TEXT, persona TEXT, style TEXT, rating TEXT, comment TEXT, user_msg TEXT, assistant_msg TEXT)')
    conn.commit()
    conn.close()

def save_feedback_db(feedback_data: Dict[str, Any]):
    conn = sqlite3.connect('feedback_v2.db')
    c = conn.cursor()
    c.execute('INSERT INTO feedback (timestamp, persona, style, rating, comment, user_msg, assistant_msg) VALUES (?, ?, ?, ?, ?, ?, ?)',
              (feedback_data.get("timestamp"), feedback_data.get("persona"), feedback_data.get("style"), feedback_data.get("rating"),
               feedback_data.get("comment"), feedback_data.get("user_msg"), feedback_data.get("assistant_msg")))
    conn.commit()
    conn.close()

def get_feedback_data():
    conn = sqlite3.connect('feedback_v2.db')
    df = pd.read_sql_query("SELECT * FROM feedback", conn)
    conn.close()
    return df

# =========================
# P√°gina Principal do Chat (com LangChain)
# =========================
def main_chat_page():
    st.sidebar.title("‚öôÔ∏è Configura√ß√µes Avan√ßadas")
    persona = st.sidebar.selectbox("Persona", list(PERSONAS.keys()), index=0)
    style = st.sidebar.selectbox("Estilo", list(STYLES.keys()), index=0)

    st.sidebar.markdown("---")
    st.sidebar.info("‚úÖ LangChain e Tools integrados!")

    # UI - Cabe√ßalho
    st.title("üß† Chatbot OCI v4")
    st.caption("Agora com LangChain, Mem√≥ria Avan√ßada e Ferramentas de API Externa")

    # Inicializar estado da sess√£o para LangChain
    if "memory" not in st.session_state:
        st.session_state.memory = ConversationBufferWindowMemory(
            k=5, memory_key="chat_history", return_messages=True
        )

    # Constr√≥i o prompt do sistema
    system_prompt_text = f"""Voc√™ √© um assistente especializado com foco em {persona}.
    Persona: {PERSONAS[persona]}
    Estilo: {style}. {STYLES[style]}
    Regras: Responda em PT-BR. Seja √∫til e honesto. Use suas ferramentas quando necess√°rio."""

    # Configura√ß√£o do Agente LangChain
    llm = MockOCI()
    prompt = PromptTemplate.from_template(
        f"""{system_prompt_text}

Voc√™ tem acesso √†s seguintes ferramentas:
{{tools}}

Use o seguinte formato:

Pergunta: a pergunta de entrada que voc√™ deve responder
Pensamento: voc√™ deve sempre pensar sobre o que fazer
A√ß√£o: a a√ß√£o a ser tomada, deve ser uma de [{{tool_names}}]
Entrada da A√ß√£o: a entrada para a a√ß√£o
Observa√ß√£o: o resultado da a√ß√£o
... (este Pensamento/A√ß√£o/Entrada da A√ß√£o/Observa√ß√£o pode se repetir N vezes)
Pensamento: Agora sei a resposta final
Resposta Final: a resposta final para a pergunta original

Comece!

{{chat_history}}

Pergunta: {{input}}
Pensamento: {{agent_scratchpad}}"""
    )
    agent = create_react_agent(llm, tools, prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools, memory=st.session_state.memory, verbose=True, handle_parsing_errors=True)

    # Bot√£o para limpar mem√≥ria
    if st.button("üóëÔ∏è Limpar Mem√≥ria da Conversa", use_container_width=True):
        st.session_state.memory.clear()
        st.rerun()

    # Renderizar hist√≥rico de conversa da mem√≥ria LangChain
    for msg in st.session_state.memory.chat_memory.messages:
        if msg.type == "human":
            with st.chat_message("user", avatar="üßë‚Äçüíª"):
                st.markdown(f'<div class="bubble-user">{msg.content}</div>', unsafe_allow_html=True)
        elif msg.type == "ai":
            with st.chat_message("assistant", avatar="ü§ñ"):
                st.markdown(f'<div class="bubble-bot">{msg.content}</div>', unsafe_allow_html=True)

    # Entrada do usu√°rio
    user_msg = st.chat_input("Pergunte sobre um pa√≠s ou converse normalmente...")
    if user_msg:
        with st.chat_message("user", avatar="üßë‚Äçüíª"):
            st.markdown(f'<div class="bubble-user">{user_msg}</div>', unsafe_allow_html=True)

        with st.spinner("ü§ñ Pensando e usando ferramentas..."):
            try:
                response = agent_executor.invoke({"input": user_msg})
                assistant_text = response["output"]

                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.markdown(f'<div class="bubble-bot">{assistant_text}</div>', unsafe_allow_html=True)

                # Mostra o "pensamento" do agente
                with st.expander("Ver o processo de pensamento do Agente", expanded=False):
                    st.markdown(f'<div class="thought-bubble">{response}</div>', unsafe_allow_html=True)

            except Exception as e:
                st.error(f"‚ö†Ô∏è Erro ao executar o agente: {e}")

# =========================
# P√°gina de Analytics (sem altera√ß√µes)
# =========================
def analytics_page():
    st.title("üìä Analytics - Feedback do Chatbot v4")
    df = get_feedback_data()
    if df.empty:
        st.info("üìù Ainda n√£o h√° dados de feedback coletados.")
        return

    df['timestamp'] = pd.to_datetime(df['timestamp'])
    total_feedbacks = len(df)
    positive_feedbacks = len(df[df['rating'] == 'üëç'])
    satisfaction_rate = (positive_feedbacks / total_feedbacks * 100) if total_feedbacks > 0 else 0

    st.metric("Taxa de Satisfa√ß√£o Geral", f"{satisfaction_rate:.1f}%")
    st.dataframe(df)

# =========================
# App principal
# =========================
def main():
    init_db()
    st.sidebar.title("Navega√ß√£o")
    page = st.sidebar.radio("Selecione a p√°gina:", ["üí¨ Chat Avan√ßado", "üìä Analytics"])

    if page == "üí¨ Chat Avan√ßado":
        main_chat_page()
    elif page == "üìä Analytics":
        analytics_page()

if __name__ == "__main__":
    main()

